#!/usr/bin/env python3
"""
Script para corrigir problemas cr√≠ticos do projeto Ali API.

Este script identifica e corrige os principais problemas que impedem
o funcionamento correto da aplica√ß√£o:

1. Problemas de configura√ß√£o de banco de dados
2. Depend√™ncias ausentes ou mal configuradas
3. Problemas de importa√ß√£o
4. Configura√ß√µes de ambiente
"""

import os
import sys
import asyncio
from pathlib import Path

# Adicionar o diret√≥rio raiz ao path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))


def check_environment():
    """Verifica se as vari√°veis de ambiente est√£o configuradas."""
    print("üîç Verificando configura√ß√µes de ambiente...")
    
    env_file = project_root / ".env.development"
    if not env_file.exists():
        print("‚ùå Arquivo .env.development n√£o encontrado")
        return False
    
    # Verificar vari√°veis cr√≠ticas
    critical_vars = [
        "LLM_API_KEY",
        "JWT_SECRET_KEY",
        "POSTGRES_URL",
    ]
    
    missing_vars = []
    with open(env_file) as f:
        content = f.read()
        for var in critical_vars:
            if f"{var}=your-" in content or f"{var}=sk-your-" in content:
                missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ö†Ô∏è  Vari√°veis n√£o configuradas: {', '.join(missing_vars)}")
        print("   Configure essas vari√°veis no .env.development")
        return False
    
    print("‚úÖ Configura√ß√µes de ambiente OK")
    return True


def check_database_connection():
    """Verifica a conex√£o com o banco de dados."""
    print("üîç Verificando conex√£o com banco de dados...")
    
    try:
        from app.services.database import database_service
        # Tentar criar uma sess√£o
        session = database_service.get_session_maker()
        session.close()
        print("‚úÖ Conex√£o com banco de dados OK")
        return True
    except Exception as e:
        print(f"‚ùå Erro na conex√£o com banco: {e}")
        return False


def check_imports():
    """Verifica se todas as importa√ß√µes cr√≠ticas funcionam."""
    print("üîç Verificando importa√ß√µes cr√≠ticas...")
    
    critical_imports = [
        "app.main",
        "app.api.v1.api",
        "app.core.agno.graph",
        "app.services.database",
        "app.domain.services",
    ]
    
    failed_imports = []
    for module in critical_imports:
        try:
            __import__(module)
            print(f"‚úÖ {module}")
        except Exception as e:
            print(f"‚ùå {module}: {e}")
            failed_imports.append(module)
    
    return len(failed_imports) == 0


def create_missing_directories():
    """Cria diret√≥rios necess√°rios que podem estar ausentes."""
    print("üîç Criando diret√≥rios necess√°rios...")
    
    directories = [
        "data",
        "logs",
        "tmp",
        "evals/results",
    ]
    
    for directory in directories:
        dir_path = project_root / directory
        if not dir_path.exists():
            dir_path.mkdir(parents=True, exist_ok=True)
            print(f"‚úÖ Criado: {directory}")
        else:
            print(f"‚úÖ Existe: {directory}")


def fix_elasticsearch_issues():
    """Corrige problemas relacionados ao Elasticsearch."""
    print("üîç Verificando configura√ß√£o do Elasticsearch...")
    
    # Verificar se as configura√ß√µes do Elasticsearch est√£o corretas
    env_file = project_root / ".env.development"
    if env_file.exists():
        with open(env_file) as f:
            content = f.read()
            if "ELASTICSEARCH_URL" in content and "ELASTICSEARCH_API_KEY" in content:
                print("‚úÖ Configura√ß√µes do Elasticsearch encontradas")
                return True
    
    print("‚ö†Ô∏è  Configura√ß√µes do Elasticsearch podem estar incompletas")
    return False


def run_basic_tests():
    """Executa testes b√°sicos para verificar se os problemas foram corrigidos."""
    print("üîç Executando testes b√°sicos...")
    
    try:
        # Teste de importa√ß√£o da aplica√ß√£o
        from app.main import app
        print("‚úÖ Aplica√ß√£o importada com sucesso")
        
        # Teste de configura√ß√µes
        from app.core.config import settings
        print(f"‚úÖ Configura√ß√µes carregadas: {settings.PROJECT_NAME}")
        
        # Teste de agente Agno
        from app.core.agno.graph import AgnoAgent
        agent = AgnoAgent()
        print("‚úÖ AgnoAgent inicializado")
        
        return True
    except Exception as e:
        print(f"‚ùå Erro nos testes b√°sicos: {e}")
        return False


def main():
    """Fun√ß√£o principal do script de corre√ß√£o."""
    print("üöÄ Iniciando corre√ß√£o de problemas cr√≠ticos do Ali API\n")
    
    # Lista de verifica√ß√µes
    checks = [
        ("Criando diret√≥rios", create_missing_directories),
        ("Verificando ambiente", check_environment),
        ("Verificando importa√ß√µes", check_imports),
        ("Verificando banco de dados", check_database_connection),
        ("Verificando Elasticsearch", fix_elasticsearch_issues),
        ("Executando testes b√°sicos", run_basic_tests),
    ]
    
    results = []
    for name, check_func in checks:
        print(f"\n{'='*50}")
        print(f"üìã {name}")
        print(f"{'='*50}")
        
        try:
            result = check_func()
            results.append((name, result))
        except Exception as e:
            print(f"‚ùå Erro durante {name}: {e}")
            results.append((name, False))
    
    # Resumo final
    print(f"\n{'='*50}")
    print("üìä RESUMO FINAL")
    print(f"{'='*50}")
    
    passed = 0
    for name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{status} - {name}")
        if result:
            passed += 1
    
    print(f"\nüìà Resultado: {passed}/{len(results)} verifica√ß√µes passaram")
    
    if passed == len(results):
        print("\nüéâ Todos os problemas cr√≠ticos foram corrigidos!")
        print("   Voc√™ pode agora executar os testes com: pytest")
    else:
        print("\n‚ö†Ô∏è  Ainda h√° problemas que precisam ser resolvidos manualmente.")
        print("   Verifique os erros acima e configure as vari√°veis necess√°rias.")
    
    return passed == len(results)


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)