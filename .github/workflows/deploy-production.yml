name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Git tag to deploy (e.g., v1.0.0)"
        required: true
        type: string
      confirm:
        description: 'Type "DEPLOY" to confirm production deployment'
        required: true
        type: string

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: us-central1
  SERVICE_NAME: ali-api-production
  ARTIFACT_REGISTRY_REPO: ali-api-repo

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Validate confirmation
        run: |
          if [ "${{ inputs.confirm }}" != "DEPLOY" ]; then
            echo "‚ùå Deployment not confirmed. Please type 'DEPLOY' to proceed."
            exit 1
          fi
          echo "‚úÖ Deployment confirmed"

      - name: Validate tag format
        run: |
          if [[ ! "${{ inputs.tag }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Invalid tag format. Use semantic versioning (e.g., v1.0.0)"
            exit 1
          fi
          echo "‚úÖ Tag format valid: ${{ inputs.tag }}"

  test:
    needs: validate
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      qdrant:
        image: qdrant/qdrant:latest
        ports:
          - 6333:6333
        options: >
          --health-cmd "curl -f http://localhost:6333/ || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 10
          --health-start-period 30s

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      QDRANT_URL: http://localhost:6333
      APP_ENV: test
      JWT_SECRET_KEY: test-secret-key-for-testing-only
      FIREBASE_PROJECT_ID: test-project
      FIREBASE_CREDENTIALS_PATH: /tmp/test-firebase-credentials.json
      FIREBASE_STORAGE_BUCKET: test-project.appspot.com
      FIREBASE_REGION: us-central1

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Create test Firebase credentials
        run: |
          echo '{"type": "service_account", "project_id": "test-project"}' > /tmp/test-firebase-credentials.json

      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install -e .
          uv pip install --group dev
          uv pip install --group test

      - name: Wait for services
        run: |
          echo "Checking docker version"
          docker --version
          
          echo "Clean up resources from previous jobs"
          docker system prune -f || true
          
          echo "Create local container network"
          docker network create test-network || true
          
          echo "Starting postgres service container"
          echo "Starting qdrant service container"
          
          echo "Waiting for all services to be ready"
          echo "Waiting for PostgreSQL..."
          timeout 120 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do echo "PostgreSQL not ready, waiting..."; sleep 2; done'
          echo "‚úÖ PostgreSQL is ready"
          
          echo "Waiting for Qdrant..."
          timeout 120 bash -c 'until curl -f http://localhost:6333/ >/dev/null 2>&1; do echo "Qdrant not ready, waiting..."; sleep 2; done'
          echo "‚úÖ Qdrant is ready"
          
          echo "Testing Qdrant health endpoint..."
          curl -v http://localhost:6333/ || echo "‚ö†Ô∏è Qdrant root endpoint failed"
          curl -v http://localhost:6333/health || echo "‚ö†Ô∏è Qdrant health endpoint failed"

      - name: Run full test suite
        run: |
          source .venv/bin/activate
          pytest --tb=short --cov=app --cov-report=term-missing --maxfail=1 -v

      - name: Run security checks
        run: |
          source .venv/bin/activate
          safety check
          bandit -r app/

      - name: Run linting
        run: |
          source .venv/bin/activate
          ruff check .
          black --check .

  deploy:
    needs: [validate, test]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker to use gcloud as a credential helper
        run: gcloud auth configure-docker $GCP_REGION-docker.pkg.dev

      - name: Build and Deploy to Production
        run: |
          gcloud builds submit \
            --config cloudbuild.yaml \
            --substitutions _REGION=$GCP_REGION,_SERVICE_NAME=$SERVICE_NAME,_APP_ENV=production \
            --region $GCP_REGION

      - name: Verify production deployment
        run: |
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$GCP_REGION --format='value(status.url)')
          echo "Production service deployed at: $SERVICE_URL"

          # Wait for service to be ready
          sleep 60

          # Test health endpoint
          curl -f "$SERVICE_URL/health" || exit 1
          echo "‚úÖ Production health check passed"

          # Test API docs (should be disabled in production)
          if curl -f "$SERVICE_URL/docs" 2>/dev/null; then
            echo "‚ö†Ô∏è  Warning: API docs are accessible in production"
          else
            echo "‚úÖ API docs properly disabled in production"
          fi

          echo "üéâ Production deployment successful!"
          echo "Service URL: $SERVICE_URL"
          echo "Deployed tag: ${{ inputs.tag }}"

      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ inputs.tag }}
          release_name: Release ${{ inputs.tag }}
          body: |
            üöÄ Production deployment of Ali API ${{ inputs.tag }}

            **Deployed to:** Production Cloud Run
            **Deployment time:** ${{ github.event.head_commit.timestamp }}
            **Commit:** ${{ github.sha }}
          draft: false
          prerelease: false
