---
## üöÄ PLANO DE MIGRA√á√ÉO ALI API PARA GOOGLE CLOUD

### Fase 1: Setup Inicial do Firebase (Semana 1)

#### 1.1 Configura√ß√£o do Projeto Firebase
- Criar projeto Firebase no console Google Cloud
- Habilitar Firebase Auth, Firestore, Cloud Storage, Cloud Logging
- Configurar dom√≠nios autorizados para CORS
- Gerar credenciais de servi√ßo

#### 1.2 Configura√ß√£o Local
- Instalar Firebase CLI: `npm install -g firebase-tools`
- Instalar SDKs Python: `pip install firebase-admin google-cloud-firestore google-cloud-storage`
- Configurar arquivo de credenciais `firebase-credentials.json`
- Criar `.env.firebase` com configura√ß√µes

#### 1.3 Estrutura de Configura√ß√£o
- Atualizar `app/core/config.py` com configura√ß√µes Firebase
- Criar `app/core/firebase.py` para inicializa√ß√£o dos servi√ßos
- Adicionar vari√°veis de ambiente para Firebase

### Fase 2: Migra√ß√£o de Autentica√ß√£o (Semana 2)

#### 2.1 Implementar Firebase Auth
- Criar `app/services/firebase_auth.py` para integra√ß√£o
- Migrar endpoints de `/auth` para usar Firebase Auth
- Implementar middleware de verifica√ß√£o de tokens Firebase
- Atualizar schemas de autentica√ß√£o

#### 2.2 Migra√ß√£o de Usu√°rios
- Script para exportar usu√°rios do PostgreSQL
- Importar usu√°rios para Firebase Auth (preservar UIDs)
- Mapear dados de perfil para Firestore
- Testar autentica√ß√£o end-to-end

### Fase 3: Migra√ß√£o do Banco de Dados (Semana 3-4)

#### 3.1 Estrutura Firestore
- Definir collections: `users`, `chat_sessions`, `documents`, `user_invitations`
- Criar subcollections para mensagens: `chat_sessions/{id}/messages`
- Implementar √≠ndices necess√°rios
- Configurar Security Rules

#### 3.2 Reposit√≥rios Firestore
- Criar `app/infrastructure/firestore/` com novos reposit√≥rios
- Implementar `FirestoreUserRepository`, `FirestoreChatRepository`, etc.
- Adaptar padr√µes de query para Firestore
- Manter interface dos domain repositories

#### 3.3 Migra√ß√£o de Dados
- Script para migrar dados PostgreSQL ‚Üí Firestore
- Preservar relacionamentos (chat_sessions ‚Üí messages)
- Validar integridade dos dados migrados
- Rollback plan se necess√°rio

### Fase 4: Sistema RAG com Qdrant (Semana 5)

#### 4.1 Setup Qdrant
- Provisionar inst√¢ncia GCE para Qdrant (e2-standard-2)
- Configurar Qdrant com collections para documentos
- Implementar backup e monitoramento
- Configurar networking e seguran√ßa

#### 4.2 Integra√ß√£o Cloud Storage
- Migrar documentos S3 ‚Üí Cloud Storage
- Atualizar `app/services/document_processor.py`
- Implementar upload/download com signed URLs
- Configurar lifecycle policies

#### 4.3 Vector Search
- Atualizar `app/services/rag.py` para Qdrant
- Migrar embeddings existentes
- Implementar busca h√≠brida (metadata + vetores)
- Otimizar performance de queries

### Fase 5: Servi√ßos Complementares (Semana 6)

#### 5.1 Cloud Logging
- Configurar structured logging para Cloud Logging
- Migrar de logs locais para Cloud Logging
- Implementar alertas e dashboards
- Configurar log retention policies

#### 5.2 Monitoramento
- Migrar Prometheus/Grafana ‚Üí Cloud Monitoring
- Implementar health checks personalizados
- Configurar alertas de performance
- Dashboard de m√©tricas de neg√≥cio

### Fase 6: Deploy e Otimiza√ß√£o (Semana 7)

#### 6.1 Cloud Run Deploy
- Containerizar aplica√ß√£o para Cloud Run
- Configurar vari√°veis de ambiente
- Implementar CI/CD com Cloud Build
- Configurar auto-scaling

#### 6.2 Frontend Setup
- Configurar Firebase Hosting
- Deploy do frontend (se existir)
- Configurar dom√≠nio customizado
- Otimizar para PWA

### Fase 7: Testes e Go-Live (Semana 8)

#### 7.1 Testes Integrados
- Testes end-to-end em ambiente staging
- Load testing com dados reais
- Valida√ß√£o de performance
- Teste de disaster recovery

#### 7.2 Go-Live
- Deploy gradual (blue-green)
- Monitoramento intensivo 24h
- Rollback plan ativado
- Comunica√ß√£o com usu√°rios

### Estimativas de Custo Final:
- Firebase Auth: Gratuito (at√© 50k users)
- Firestore: ~$0.66/m√™s
- Cloud Storage: ~$0.25/m√™s
- Cloud Logging: ~$0.65/m√™s
- Qdrant (GCE): ~$59/m√™s
- **Total: ~$60.71/m√™s**

### Riscos e Mitiga√ß√µes:
- **Risco**: Downtime durante migra√ß√£o ‚Üí **Mitiga√ß√£o**: Deploy gradual + rollback
- **Risco**: Perda de dados ‚Üí **Mitiga√ß√£o**: M√∫ltiplos backups + valida√ß√£o
- **Risco**: Performance degradation ‚Üí **Mitiga√ß√£o**: Load testing + optimiza√ß√£o

### Crit√©rios de Sucesso:
- ‚úÖ Zero perda de dados
- ‚úÖ Performance igual ou melhor
- ‚úÖ Custo reduzido em 20%+
- ‚úÖ Escalabilidade autom√°tica funcionando

---

## üöÄ TAREFAS ANTERIORES (CONCLU√çDAS)

### Fase 1: Deploy Staging Backend (Prioridade Alta)
12. **Configura√ß√£o GCP Environment:**
    - Criar/configurar projeto GCP
    - Setup Cloud SQL PostgreSQL para staging
    - Configurar secrets e vari√°veis de ambiente
    - Configurar IAM e permiss√µes

13. **Deploy API Staging:**
    - Build da imagem Docker para Cloud Run
    - Deploy no Cloud Run com configura√ß√µes staging
    - Configurar dom√≠nio personalizado e SSL
    - Testar endpoints /health, /docs em staging

### Fase 2: Frontend Integration (Prioridade Alta)
14. **Setup Frontend:**
    - Identificar/criar aplica√ß√£o frontend (Next.js/React/Vue)
    - Configurar CORS na API para dom√≠nio do frontend
    - Implementar client HTTP para comunica√ß√£o com API
    - Integrar autentica√ß√£o JWT no frontend

15. **Deploy Frontend:**
    - Deploy frontend em plataforma (Vercel/Netlify/GCP)
    - Configurar environment variables do frontend
    - Conectar frontend √† API staging
    - Testar fluxo completo: UI ‚Üí API ‚Üí Database

### Fase 3: CI/CD Pipeline (Prioridade M√©dia)
16. **GitHub Actions Setup:**
    - Workflow de build e test para backend
    - Workflow de build e deploy para frontend  
    - Deploy autom√°tico para staging (push to main)
    - Deploy manual para production (manual trigger)
    - Integra√ß√£o com GCP secrets e credenciais

17. **Monitoramento e Alertas:**
    - Configurar alertas b√°sicos (uptime, errors)
    - Dashboard de m√©tricas (Cloud Monitoring)
    - Logging estruturado e centralized
    - Health check monitoring

### Fase 4: Valida√ß√£o End-to-End (Prioridade M√©dia)
18. **Testes Integrados:**
    - Validar fluxo completo: Frontend ‚Üí API ‚Üí Database
    - Testar autentica√ß√£o e autoriza√ß√£o
    - Validar RAG service via interface web
    - Testar Agno agent responses no frontend
    - Load testing b√°sico com ferramentas

19. **Prepara√ß√£o Production:**
    - Review de configura√ß√µes de seguran√ßa
    - Backup e disaster recovery setup
    - Documentation de deployment
    - Treinamento de usu√°rios finais