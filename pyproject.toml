[project]
name = "agno-fastapi-template"
version = "0.1.0"
description = "Agno FastAPI Template"
requires-python = ">=3.13"
dependencies = [
    "fastapi>=0.115.12",
    "passlib[bcrypt]>=1.7.4",
    "pydantic[email]>=2.11.1",
    "pydantic-settings>=2.8.1",
    "python-dotenv>=1.1.0",
    "python-jose[cryptography]>=3.4.0",
    "python-multipart>=0.0.20",
    "structlog>=25.2.0",
    "uvicorn>=0.34.0",
    "bcrypt>=4.3.0",
    "slowapi>=0.1.9",
    "email-validator>=2.2.0",
    "prometheus-client>=0.19.0",
    "starlette-prometheus>=0.7.0",
    "asgiref>=3.8.1",
    "duckduckgo-search>=3.9.0",
    "tqdm>=4.67.1",
    "colorama>=0.4.6",
    "agno>=1.7.2",
    "openai>=1.50.0,<1.70.0",
    "anthropic>=0.40.0",
    "multidict>=6.1.0,!=6.3.0",
    # "sentence-transformers>=2.2.2,<3.0.0",
    # "torch>=2.0.0,<2.7.0",
    "pypdf>=3.17.0",
    "python-docx>=1.1.0",
    "beautifulsoup4>=4.12.0",
    "tiktoken>=0.5.0",
    "psutil>=5.9.0",
    "firebase-admin>=6.4.0",
    "google-cloud-firestore>=2.14.0",
    "google-cloud-storage>=2.10.0,<2.18.0",
    "google-cloud-logging>=3.8.0",
    "qdrant-client>=1.7.0",
    "elasticsearch>=8.0.0",
    "sqlalchemy",
    "sentence-transformers>=5.0.0",
]

[dependency-groups]
dev = [
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "ruff>=0.1.0",
    "djlint==1.36.4",
    "mypy>=1.0.0",
]
test = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "httpx>=0.28.0",
    "safety>=2.3.0",
    "bandit>=1.7.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]


[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py", "tests.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--maxfail=3",
    "--disable-warnings",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "auth: marks tests related to authentication",
    "database: marks tests related to database operations",
    "rag: marks tests related to RAG functionality",
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore:.*CUDA.*:UserWarning",
    "ignore:.*torch.*:UserWarning",
]

[tool.black]
line-length = 88
exclude = "venv|migrations|\\.venv|__pycache__"

[tool.flake8]
docstring-convention = "all"
ignore = ["D107", "D212", "E501", "W503", "W605", "D203", "D100"]
exclude = "venv|migrations"
max-line-length = 119

# radon
radon-max-cc = 10

[tool.isort]
profile = "black"
multi_line_output = "VERTICAL_HANGING_INDENT"
force_grid_wrap = 2
line_length = 119
skip = ["migrations", "venv"]

[tool.pylint."messages control"]
disable = [
    "line-too-long",
    "trailing-whitespace",
    "missing-function-docstring",
    "consider-using-f-string",
    "import-error",
    "too-few-public-methods",
    "redefined-outer-name",
]

[tool.pylint.master]
ignore = "migrations"

[tool.ruff]
line-length = 88
exclude = ["migrations", "*.ipynb", "venv", ".venv", "__pycache__"]

[tool.ruff.lint]
select = ["E", "F", "B", "ERA", "D", "I", "W", "PL", "PT"]
ignore = [
    "E501", # line too long
    "F401", # unused import
    "D203", # 1 blank line required before class docstring
    "D213", # multi-line docstring summary should start at the second line
    "B904", # within an except clause, raise exceptions with raise ... from err
    "B008", # do not perform function calls in argument defaults
]
unfixable = ["B"]

[tool.ruff.lint.pydocstyle]
convention = "google"

# Ignore `E402` (import violations) in all `__init__.py` files
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402"]
