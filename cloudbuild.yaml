# Cloud Build configuration for Ali API
# 
# PASSO A PASSO COMPLETO PARA DEPLOY:
#
# 1. PRÉ-REQUISITOS OBRIGATÓRIOS:
#    - Conta Google Cloud ativa
#    - Projeto Google Cloud criado
#    - APIs habilitadas: Cloud Build, Cloud Run, Artifact Registry, Secret Manager
#    - Billing account configurada
#    - gcloud CLI instalado e autenticado
#
# 2. CONFIGURAÇÃO INICIAL (apenas uma vez):
#    a) Habilitar APIs necessárias:
#       gcloud services enable cloudbuild.googleapis.com
#       gcloud services enable run.googleapis.com
#       gcloud services enable artifactregistry.googleapis.com
#       gcloud services enable secretmanager.googleapis.com
#
#    b) Criar Artifact Registry repository:
#       gcloud artifacts repositories create ali-api-repo \
#         --repository-format=docker \
#         --location=us-central1
#
#    c) Configurar autenticação Docker:
#       gcloud auth configure-docker us-central1-docker.pkg.dev
#
#    d) Criar secrets no Secret Manager (mínimos para deploy sem BD):
#       echo "sua_llm_api_key" | gcloud secrets create llm-api-key --data-file=-
#       echo "sua_jwt_secret_key" | gcloud secrets create jwt-secret-key --data-file=-
#
# 3. ESTRUTURA NECESSÁRIA NO PROJETO:
#    - Dockerfile na raiz (já existe)
#    - requirements.txt (já existe)
#    - Este arquivo cloudbuild.yaml (já existe)
#    - Código da aplicação em /app (já existe)
#
# 4. COMANDOS PARA DEPLOY:
#    a) Deploy via Cloud Build (RECOMENDADO):
#       gcloud builds submit --config=cloudbuild.yaml
#
#    b) Deploy direto (alternativo):
#       docker build -t us-central1-docker.pkg.dev/PROJECT_ID/ali-api-repo/ali-api:latest .
#       docker push us-central1-docker.pkg.dev/PROJECT_ID/ali-api-repo/ali-api:latest
#       gcloud run deploy ali-api-staging --image=us-central1-docker.pkg.dev/PROJECT_ID/ali-api-repo/ali-api:latest
#
# 5. CONFIGURAÇÕES DE PRODUÇÃO:
#    Para ambiente de produção, altere as substitutions abaixo:
#    - _APP_ENV: 'production'  
#    - _SERVICE_NAME: 'ali-api-production'
#    - Configurar variáveis de ambiente de produção
#
# 6. MONITORAMENTO PÓS-DEPLOY:
#    - Verificar logs: gcloud logging read "resource.type=cloud_run_revision"
#    - Verificar service: gcloud run services describe ali-api-staging --region=us-central1
#    - Testar endpoints: curl https://SERVICE_URL/api/health
#
# 7. TROUBLESHOOTING COMUM:
#    - Build failing: verificar Dockerfile e dependencies
#    - Deploy failing: verificar secrets e environment variables
#    - Runtime errors: verificar logs do Cloud Run
#    - Database connection: verificar PostgreSQL connection string nos secrets

steps:
  # Step 1: Build the container image (CORRECTED DOCKERFILE)
  - name: 'gcr.io/cloud-builders/docker'
    args: 
      - 'build'
      - '--no-cache'
      - '--pull'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/ali-api:${BUILD_ID}'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/ali-api:latest'
      - '.'
    env:
      - 'APP_ENV=${_APP_ENV}'

  # Step 2: Push the container image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: 
      - 'push'
      - '--all-tags'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/ali-api'

  # Step 3: Deploy to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - '${_SERVICE_NAME}'
      - '--image'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/ali-api:${BUILD_ID}'
      - '--region'
      - '${_REGION}'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--memory'
      - '2Gi'
      - '--cpu'
      - '2'
      - '--max-instances'
      - '10'
      - '--min-instances'
      - '1'
      - '--timeout'
      - '900'
      - '--port'
      - '8080'
      - '--set-env-vars'
      - 'APP_ENV=${_APP_ENV},PROJECT_ID=${PROJECT_ID},QDRANT_URL=${_QDRANT_URL},FIREBASE_PROJECT_ID=${PROJECT_ID},FIREBASE_STORAGE_BUCKET=${PROJECT_ID}.appspot.com,FIREBASE_REGION=${_FIREBASE_REGION},FIREBASE_CREDENTIALS_PATH=/secrets/firebase-credentials.json,LLM_MODEL=${_LLM_MODEL},DEFAULT_LLM_TEMPERATURE=${_DEFAULT_LLM_TEMPERATURE},MAX_TOKENS=${_MAX_TOKENS},MAX_LLM_CALL_RETRIES=${_MAX_LLM_CALL_RETRIES},RAG_INDEX_NAME=${_RAG_INDEX_NAME},RAG_EMBEDDING_MODEL=${_RAG_EMBEDDING_MODEL},RAG_CHUNK_SIZE=${_RAG_CHUNK_SIZE},RAG_CHUNK_OVERLAP=${_RAG_CHUNK_OVERLAP},RAG_MAX_RESULTS=${_RAG_MAX_RESULTS},QDRANT_COLLECTION_NAME=${_QDRANT_COLLECTION_NAME},ALLOWED_ORIGINS=${_ALLOWED_ORIGINS},DEBUG=${_DEBUG},LOG_LEVEL=${_LOG_LEVEL},LOG_FORMAT=${_LOG_FORMAT},JWT_ALGORITHM=${_JWT_ALGORITHM},JWT_ACCESS_TOKEN_EXPIRE_DAYS=${_JWT_ACCESS_TOKEN_EXPIRE_DAYS},RATE_LIMIT_DEFAULT=${_RATE_LIMIT_DEFAULT},RATE_LIMIT_CHAT=${_RATE_LIMIT_CHAT},RATE_LIMIT_CHAT_STREAM=${_RATE_LIMIT_CHAT_STREAM},RATE_LIMIT_MESSAGES=${_RATE_LIMIT_MESSAGES},RATE_LIMIT_REGISTER=${_RATE_LIMIT_REGISTER},RATE_LIMIT_LOGIN=${_RATE_LIMIT_LOGIN},RATE_LIMIT_ROOT=${_RATE_LIMIT_ROOT},RATE_LIMIT_HEALTH=${_RATE_LIMIT_HEALTH},LANGFUSE_HOST=${_LANGFUSE_HOST},LANGFUSE_PUBLIC_KEY=${_LANGFUSE_PUBLIC_KEY},ELASTICSEARCH_TIMEOUT=${_ELASTICSEARCH_TIMEOUT},ELASTICSEARCH_MAX_RETRIES=${_ELASTICSEARCH_MAX_RETRIES}'
      - '--set-secrets'
      - 'LLM_API_KEY=${_SECRET_LLM_API_KEY}:latest,JWT_SECRET_KEY=${_SECRET_JWT_SECRET_KEY}:latest,QDRANT_API_KEY=${_SECRET_QDRANT_API_KEY}:latest,FIREBASE_CREDENTIALS=${_SECRET_FIREBASE_CREDENTIALS}:latest,LANGFUSE_SECRET_KEY=${_SECRET_LANGFUSE_SECRET_KEY}:latest,ELASTICSEARCH_API_KEY=${_SECRET_ELASTICSEARCH_API_KEY}:latest'

# Default substitutions
substitutions:
  # GCP Infrastructure
  _REGION: 'us-central1'
  _ARTIFACT_REGISTRY_REPO: 'ali-api-repo'
  _SERVICE_NAME: 'ali-api-production'
  
  # Application Settings
  _APP_ENV: 'production'
  _DEBUG: 'false'
  
  # Secret Manager References
  _SECRET_LLM_API_KEY: 'ali-llm-api-key'
  _SECRET_JWT_SECRET_KEY: 'ali-jwt-secret-key'
  _SECRET_QDRANT_API_KEY: 'ali-qdrant-api-key'
  _SECRET_FIREBASE_CREDENTIALS: 'ali-firebase-credentials'
  _SECRET_LANGFUSE_SECRET_KEY: 'ali-langfuse-secret-key'
  _SECRET_ELASTICSEARCH_API_KEY: 'ali-elasticsearch-api-key'
  
  # External Services
  _QDRANT_URL: 'https://a7ec9a98-1327-4fe0-869d-e33b52d4a498.us-east4-0.gcp.cloud.qdrant.io'
  _QDRANT_COLLECTION_NAME: 'aguas_claras'
  
  # Firebase Settings
  _FIREBASE_REGION: 'us-central1'
  
  # LLM Configuration
  _LLM_MODEL: 'gpt-4o-mini'
  _DEFAULT_LLM_TEMPERATURE: '0.2'
  _MAX_TOKENS: '2000'
  _MAX_LLM_CALL_RETRIES: '3'
  
  # RAG Configuration
  _RAG_INDEX_NAME: 'aguas_claras'
  _RAG_EMBEDDING_MODEL: 'sentence-transformers/all-MiniLM-L6-v2'
  _RAG_CHUNK_SIZE: '1000'
  _RAG_CHUNK_OVERLAP: '200'
  _RAG_MAX_RESULTS: '5'
  
  # CORS Settings (Production)
  _ALLOWED_ORIGINS: 'https://ali-app-97976.web.app,https://ali-app-97976.firebaseapp.com'
  
  # Logging Configuration
  _LOG_LEVEL: 'INFO'
  _LOG_FORMAT: 'json'
  
  # JWT Configuration
  _JWT_ALGORITHM: 'HS256'
  _JWT_ACCESS_TOKEN_EXPIRE_DAYS: '30'
  
  # Rate Limiting (Production Values)
  _RATE_LIMIT_DEFAULT: '5000 per day,500 per hour'
  _RATE_LIMIT_CHAT: '200 per minute'
  _RATE_LIMIT_CHAT_STREAM: '100 per minute'
  _RATE_LIMIT_MESSAGES: '200 per minute'
  _RATE_LIMIT_REGISTER: '10 per hour'
  _RATE_LIMIT_LOGIN: '30 per minute'
  _RATE_LIMIT_ROOT: '100 per minute'
  _RATE_LIMIT_HEALTH: '500 per minute'
  
  # Observability (Langfuse)
  _LANGFUSE_HOST: 'https://cloud.langfuse.com'
  _LANGFUSE_PUBLIC_KEY: 'your-langfuse-public-key'
  
  # Search (Elasticsearch) 
  _ELASTICSEARCH_TIMEOUT: '30'
  _ELASTICSEARCH_MAX_RETRIES: '3'

# Build options
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'