[project]
name = "agno-fastapi-template"
version = "0.1.0"
description = "Agno FastAPI Template"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "fastapi>=0.116.1",
    "passlib[bcrypt]>=1.7.4",
    "psycopg2-binary>=2.9.10",
    "pydantic[email]>=2.11.1",
    "pydantic-settings>=2.10.1",
    "python-dotenv>=1.1.1",
    "python-jose[cryptography]>=3.4.0",
    "python-multipart>=0.0.20",
    "sqlmodel>=0.0.24",
    "structlog>=25.4.0",
    "supabase>=2.17.0",
    "uvicorn>=0.35.0",
    "bcrypt>=4.3.0",
    "slowapi>=0.1.9",
    "email-validator>=2.2.0",
    "prometheus-client>=0.22.1",
    "starlette-prometheus>=0.10.0",
    "asgiref>=3.9.1",
    "duckduckgo-search>=8.1.1",
    "tqdm>=4.67.1",
    "colorama>=0.4.6",
    "agno>=1.7.6",
    "openai>=1.98.0",
    "anthropic>=0.60.0",
    "multidict>=6.6.3",
    "elasticsearch>=8.19.0,<9.0.0",
    "sentence-transformers>=5.0.0",
    "langchain>=0.3.27",
    "langchain-elasticsearch>=0.3.2",
    "pypdf>=5.9.0",
    "python-docx>=1.2.0",
    "beautifulsoup4>=4.13.4",
    "tiktoken>=0.9.0",
    "langchain-community>=0.3.27",
    "alembic>=1.16.4",
    "psutil>=7.0.0",
    "langfuse>=2.56.0",
]

[project.optional-dependencies]
dev = [
    "black>=24.0.0",
    "isort>=5.13.0",
    "flake8>=7.0.0",
    "ruff>=0.8.0",
    "djlint>=1.36.4",
    "mypy>=1.13.0",
    "pre-commit>=4.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.uv]
dev-dependencies = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "httpx>=0.28.1",
    "black>=24.0.0",
    "ruff>=0.8.0",
    "isort>=5.13.0",
]

[dependency-groups]
test = ["httpx>=0.28.1", "pytest>=8.3.5"]


[tool.pytest.ini_options]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning",
]
python_files = ["test_*.py", "*_test.py", "tests.py"]

[tool.black]
line-length = 79
exclude = "venv|migrations"

[tool.flake8]
docstring-convention = "all"
ignore = ["D107", "D212", "E501", "W503", "W605", "D203", "D100"]
exclude = "venv|migrations"
max-line-length = 119

# radon
radon-max-cc = 10

[tool.isort]
profile = "black"
multi_line_output = "VERTICAL_HANGING_INDENT"
force_grid_wrap = 2
line_length = 119
skip = ["migrations", "venv"]

[tool.pylint."messages control"]
disable = [
    "line-too-long",
    "trailing-whitespace",
    "missing-function-docstring",
    "consider-using-f-string",
    "import-error",
    "too-few-public-methods",
    "redefined-outer-name",
]

[tool.pylint.master]
ignore = "migrations"

[tool.ruff]
line-length = 79
exclude = ["migrations", "*.ipynb", "venv"]

[tool.ruff.lint]
# Enable flake8-bugbear (`B`) rules and docstring (`D`) rules
select = ["E", "F", "B", "ERA", "D", "I", "W", "PL", "PT"]
# Never enforce `E501` (line length violations).
ignore = ["E501", "F401", "D203", "D213", "B904", "B008"]
# Avoid trying to fix flake8-bugbear (`B`) violations.
unfixable = ["B"]

[tool.ruff.lint.pydocstyle]
convention = "google"

# Ignore `E402` (import violations) in all `__init__.py` files
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402"]
