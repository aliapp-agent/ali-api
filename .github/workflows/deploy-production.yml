name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: us-central1
  SERVICE_NAME: ali-api-production

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug Environment
        run: |
          echo "PROJECT_ID: ${{ env.PROJECT_ID }}"
          echo "GCP_REGION: ${{ env.GCP_REGION }}"
          echo "SERVICE_NAME: ${{ env.SERVICE_NAME }}"
          echo "Has GCP_SA_KEY: ${{ secrets.GCP_SA_KEY != '' }}"
          echo "Has GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID != '' }}"

      - name: Check Required Secrets
        run: |
          if [ -z "${{ secrets.GCP_SA_KEY }}" ]; then
            echo "‚ùå Error: GCP_SA_KEY secret is not configured"
            echo "Please configure the GCP service account key in GitHub Secrets"
            exit 1
          fi
          if [ -z "${{ secrets.GCP_PROJECT_ID }}" ]; then
            echo "‚ùå Error: GCP_PROJECT_ID secret is not configured"
            echo "Please configure the GCP project ID in GitHub Secrets"
            exit 1
          fi
          echo "‚úÖ Required secrets are configured"

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      - name: Iniciar Cloud Build (s√≥ sucesso/falha, sem logs)
        shell: bash
        run: |
          set -euo pipefail
          export CLOUDSDK_CORE_DISABLE_PROMPTS=1

          # Trigger do build em modo ass√≠ncrono (n√£o bloqueia)
          BUILD_ID=$(gcloud builds submit \
            --config cloudbuild.yaml \
            --substitutions _REGION=${{ env.GCP_REGION }},_SERVICE_NAME=${{ env.SERVICE_NAME }},_APP_ENV=production \
            --region="${{ env.GCP_REGION }}" \
            --async \                      # retorna imediatamente :contentReference[oaicite:1]{index=1}
            --suppress-logs \              # evita tentativa de stream de logs :contentReference[oaicite:2]{index=2}
            --format="value(metadata.build.id)" )

          echo "üë∑ Build Cloud Build ID: $BUILD_ID"

          # Poll de status por at√© ~5‚ÄØmin (30√ó10s)
          for i in {1..30}; do
            STATUS=$(gcloud builds describe "$BUILD_ID" --format="value(status)")
            case "$STATUS" in
              "SUCCESS")
                echo "‚úÖ Build conclu√≠do com sucesso"
                exit 0
                ;;
              "FAILURE"|"INTERNAL_ERROR"|"TIMEOUT"|"CANCELLED"|"EXPIRED")
                echo "‚ùå Build finalizado com status: $STATUS"
                exit 1
                ;;
              *)
                # PENDING, QUEUED, WORKING ou outro
                echo "üöß Status atual: $STATUS ‚Äî aguardando..."
                sleep 10
                ;;
            esac
          done

          echo "‚ùå Tempo limite excedido (aprox. 5 min), √∫ltimo status: $STATUS"
          exit 1