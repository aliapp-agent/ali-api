# Cloud Build configuration for Ali API
# 
# PASSO A PASSO COMPLETO PARA DEPLOY:
#
# 1. PRÉ-REQUISITOS OBRIGATÓRIOS:
#    - Conta Google Cloud ativa
#    - Projeto Google Cloud criado
#    - APIs habilitadas: Cloud Build, Cloud Run, Artifact Registry, Secret Manager
#    - Billing account configurada
#    - gcloud CLI instalado e autenticado
#
# 2. CONFIGURAÇÃO INICIAL (apenas uma vez):
#    a) Habilitar APIs necessárias:
#       gcloud services enable cloudbuild.googleapis.com
#       gcloud services enable run.googleapis.com
#       gcloud services enable artifactregistry.googleapis.com
#       gcloud services enable secretmanager.googleapis.com
#
#    b) Criar Artifact Registry repository:
#       gcloud artifacts repositories create ali-api-repo \
#         --repository-format=docker \
#         --location=us-central1
#
#    c) Configurar autenticação Docker:
#       gcloud auth configure-docker us-central1-docker.pkg.dev
#
#    d) Criar secrets no Secret Manager (mínimos para deploy sem BD):
#       echo "sua_llm_api_key" | gcloud secrets create llm-api-key --data-file=-
#       echo "sua_jwt_secret_key" | gcloud secrets create jwt-secret-key --data-file=-
#
# 3. ESTRUTURA NECESSÁRIA NO PROJETO:
#    - Dockerfile na raiz (já existe)
#    - requirements.txt (já existe)
#    - Este arquivo cloudbuild.yaml (já existe)
#    - Código da aplicação em /app (já existe)
#
# 4. COMANDOS PARA DEPLOY:
#    a) Deploy via Cloud Build (RECOMENDADO):
#       gcloud builds submit --config=cloudbuild.yaml
#
#    b) Deploy direto (alternativo):
#       docker build -t us-central1-docker.pkg.dev/PROJECT_ID/ali-api-repo/ali-api:latest .
#       docker push us-central1-docker.pkg.dev/PROJECT_ID/ali-api-repo/ali-api:latest
#       gcloud run deploy ali-api-staging --image=us-central1-docker.pkg.dev/PROJECT_ID/ali-api-repo/ali-api:latest
#
# 5. CONFIGURAÇÕES DE PRODUÇÃO:
#    Para ambiente de produção, altere as substitutions abaixo:
#    - _APP_ENV: 'production'  
#    - _SERVICE_NAME: 'ali-api-production'
#    - Remover USE_MOCK_SERVICES=true quando tiver PostgreSQL
#
# 6. MONITORAMENTO PÓS-DEPLOY:
#    - Verificar logs: gcloud logging read "resource.type=cloud_run_revision"
#    - Verificar service: gcloud run services describe ali-api-staging --region=us-central1
#    - Testar endpoints: curl https://SERVICE_URL/api/health
#
# 7. TROUBLESHOOTING COMUM:
#    - Build failing: verificar Dockerfile e dependencies
#    - Deploy failing: verificar secrets e environment variables
#    - Runtime errors: verificar logs do Cloud Run
#    - Database connection: verificar PostgreSQL connection string nos secrets

steps:
  # Step 1: Build the container image (CORRECTED DOCKERFILE)
  - name: 'gcr.io/cloud-builders/docker'
    args: 
      - 'build'
      - '--no-cache'
      - '--pull'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/ali-api:${BUILD_ID}'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/ali-api:latest'
      - '.'
    env:
      - 'APP_ENV=${_APP_ENV}'

  # Step 2: Push the container image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: 
      - 'push'
      - '--all-tags'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/ali-api'

  # Step 3: Deploy to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - '${_SERVICE_NAME}'
      - '--image'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/ali-api:${BUILD_ID}'
      - '--region'
      - '${_REGION}'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--port'
      - '8000'
      - '--memory'
      - '2Gi'
      - '--cpu'
      - '2'
      - '--max-instances'
      - '10'
      - '--min-instances'
      - '1'
      - '--timeout'
      - '900'
      - '--no-cpu-throttling'
      - '--set-env-vars'
      - 'APP_ENV=${_APP_ENV},PROJECT_ID=${PROJECT_ID},QDRANT_URL=${_QDRANT_URL},QDRANT_API_KEY=${_QDRANT_API_KEY},ALLOWED_ORIGINS="${_ALLOWED_ORIGINS}"'
      - '--set-secrets'
      - 'LLM_API_KEY=${_SECRET_LLM_API_KEY}:latest,JWT_SECRET_KEY=${_SECRET_JWT_SECRET_KEY}:latest'

# Default substitutions
substitutions:
  _REGION: 'us-central1'
  _ARTIFACT_REGISTRY_REPO: 'ali-api-repo'
  _SERVICE_NAME: 'ali-api-production'
  _APP_ENV: 'production'
  _SECRET_LLM_API_KEY: 'llm-api-key'
  _SECRET_JWT_SECRET_KEY: 'jwt-secret-key'
  _QDRANT_URL: 'https://a7ec9a98-1327-4fe0-869d-e33b52d4a498.us-east4-0.gcp.cloud.qdrant.io'
  _QDRANT_API_KEY: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2Nlc3MiOiJtIn0.yFsc6gtKzD5n2dalsPp6dvY8Cz9raMbkGUarmM0VbdM'
  _ALLOWED_ORIGINS: 'https://ali-app-97976.web.app,https://ali-app-97976.firebaseapp.com'

# Build options
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'